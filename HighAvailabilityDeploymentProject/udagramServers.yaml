Description: >
    This stack creates servers and security group as IaC
    for the Udagram project

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    myInstance:
      Type: String
      Default: t3.small
    ImageID:
      Type: String
      Default: ami-00ddb0e5626798373
    HomeIp:
      Type: String
      Default: 10.0.0.255

Resources:
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion security group allowing access to WebApp Servers
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub ${HomeIp}
  JumpBox:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Sub ${ImageID}
      InstanceType: t2.micro
      KeyName: jumpbox-key
      SubnetId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-PUB1-SN
      SecurityGroupIds:
      - !Ref BastionSG
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group allowing 80,443
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress :
      - IpProtocol: tcp   
        FromPort: 0  
        ToPort: 65535 
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Application security group allowing 80,443
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16     
      SecurityGroupEgress:
      - IpProtocol: tcp   
        FromPort: 0  
        ToPort: 65535 
        CidrIp: 0.0.0.0/0 
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udagramproj/udagramPackage.zip
            unzip -o udacity.zip
            echo "Udacity Demo Web Server Up and Running!" > demo.html
      ImageId: !Sub ${ImageID}
      #KeyName: EC2adminkey
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Sub ${myInstance}
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref LBSecGroup
      Subnets: 
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebAppLB
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup  
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1        

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: instanceS3profile
      Path: /
      Roles:
        - !Ref IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-IamRole
      Description: Iam Role Allowing EC2 instance to use S3 bucket
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      MaxSessionDuration: 3600
  
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReadS3
      Roles: 
      - !Ref IamRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::udagramproj/udagramPackage.zip'
  
Outputs:
  WebAppLB:
    Description: This is a reference for the LoadBalancer DNS name
    Value:  !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-AppLB
  